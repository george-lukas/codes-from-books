;;;; wzrdai.lisp
;;;; George Lukas

;;; Helper functions
(defun mklist (x)
  "Return x if it is a list, otherwise (x)."
  (if (listp x) x (list x)))

(defun mappend (fn lst)	
  "Apply fn to each element of list and append the results."
  (apply #'append (mapcar fn lst)))

(defun random-elt (choices)
  "Choose an element from a list at random."
  (elt choices (random (length choices))))

(defun flatten (lst)
  "Append together elements (or lists) in the list."
  (mappend #'mklist lst))

;;; Defing rules
(defun rule-pattern (rule) (first rule))
(defun rule-responses (rule) (rest rule))

(defparameter *wzrdai-rules*
 '((((?* ?x) hello (?* ?y))      
    (How do you do.  Please state your problem.))
   (((?* ?x) I want (?* ?y))     
    (What would it mean if you got ?y)
    (Why do you want ?y) (Suppose you got ?y soon))
   (((?* ?x) if (?* ?y)) 
    (Do you really think its likely that ?y) (Do you wish that ?y)
    (What do you think about ?y) (Really-- if ?y))
   (((?* ?x) no (?* ?y))
    (Why not?) (You are being a bit negative)
    (Are you saying "NO" just to be negative?))
   (((?* ?x) I was (?* ?y))       
    (Were you really?) (Perhaps I already knew you were ?y)
    (Why do you tell me you were ?y now?))
   (((?* ?x) I feel (?* ?y))     
    (Do you often feel ?y ?))
   (((?* ?x) I felt (?* ?y))     
    (What other feelings do you have?))))

;;; Defining main body
(defun switch-viewpoint (words)
  "Change I to you and vice versa, and so on."
  (sublis '((I . you) (you . I) (me . you) (am . are))
          words))

(defun wzrdai ()
  "Respond to user input using pattern matching rules."
  (loop
     (print 'wizard-ai>)
     (print (flatten (use-wzrdai-rules (read))))))

(defun use-wzrdai-rules (input)
  "Find some rule with which to transform the input."
  (rule-based-translator input *wzrdai-rules*   
			 :action #'(lambda (bindings responses)
				     (sublis (switch-viewpoint bindings)
					     (random-elt responses)))))
