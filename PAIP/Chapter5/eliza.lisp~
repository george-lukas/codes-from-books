;;;; eliza.lisp - Chapter 5: First version Of Eliza
;;;; George Lukas < Jan/11/2016 >

(defconstant +fail+ nil
  "Indicates MATCH failure.")

(defconstant +cu+ nil )

(defun get-binding (var bindings)
  "Find a (variable . value) pair in a binding list."
  (assoc var bindings))

(defun binding-val (binding)
  "Get the value part of a single binding."
  (rest binding))

(defun lookup (var bindings)
  "Get the value part (for var) from a binding list."
  (binding-val (get-binding var bindings)))

(defun extended-bindings (var val bindings)
  "Add a (var . value) pair to a binding list."
  (cons (cons var val) bindings))

(defun variable-p (x)
  "Is X a variable (a symbol begining with '?')?"
  (and (symbolp x) (eql (char (symbol-name x) 0) #\?)))

(defun match (pattern input &optional (bindings '((T . T)) ))
  "Match pattern against input in the context of the bindings."
  (cond ((eql bindings +fail+) +fail+)
	((variable-p pattern)
	 (match-variable pattern input bindings))
	((eql pattern input) bindings)
	((and (consp pattern) (consp input))
	 (match (rest pattern) (rest input)
		(match (first pattern) (first input)
		       bindings)))
	(t +fail+)))

(defun match-variable (var input bindings)
  "Does VAR match input? Uses (or updates) and returns bindings."
  (let ((binding (get-binding var bindings)))
    (cond ((not binding) (extended-bindings var input bindings))
	  ((eql input (binding-val binding)) binding)
	  (t +fail+))))
